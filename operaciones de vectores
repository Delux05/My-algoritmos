#include <iostream>
#include <conio.h>
using namespace std;

void cargar(int vec[],int n){
	int i;
	for(i=0;i<n;i++){
		cout<<"ingrese elemento :";
		cin>>vec[i];
	}
}

void mostrar(int vec[],int n){
	int i;
	for(i=0;i<n;i++){
		cout<<vec[i];
	}
}

void ordadc(int vec[],int n){
	int i,j,aux;
	for(i=0;i<n;i++){
		for(j=i+1;j<n;j++){
			if(vec[i]>vec[j]){
				aux=vec[i];
				vec[i]=vec[j];
				vec[j]=aux;
			}
		}
	}
	
}

bool verifprim(int a){
	bool k=true;
	int i;
	for(i=2;i<a;i++){
		if(a%i==0){
			k=false;

		}
	}
	return(k);
}

/*void ordprim(int vec[],int n){
	int i,vaux[25],naux=0,m=0;
	for(i=0;i<n;i++){
		if(verifprim(vec[i])==true){
			vaux[naux]=vec[i];
			naux++;
		}
	}
	ordadc(vaux,naux);
	for(i=0;i<naux;i++){
		if(verifprim(vaux[m])==true){
			vec[i]=vaux[m];
			m++;
		}
	}
}*/

int contardig(int a){
	int s=0;
	while(a>0){
		s++;
		a=a/10;
	}
	return(s);
}

void opdigvect(int vec[],int n,int v2[],int &n2){
	int i;
	for(i=0;i<n;i++){
		v2[i]=contardig(vec[i]);
	}
	n2=n;
}

int elemay(int vec[],int n){
	int i,may=vec[0];
	for(i=0;i<n;i++){
		if(vec[i]>may){
			may=vec[i];
		}
	}
	return(may);
}

void elmay(int vec[],int &n){
	int i,j,aux;
	aux=elemay(vec,n);
	for(i=0;i<n;i++){
		if(vec[i]==aux){
			for(j=i;j<n-1;j++){
				vec[j]=vec[j+1];
			}
			n--;
			i--;
		}
	}

}

void elemprim(int vec[],int &n){
	int i,j;
	for(i=0;i<n;i++){
		if(verifprim(vec[i])==true){
			for(j=i;j<n-1;j++){
				vec[j]=vec[j+1];
			}
			n--;
			i--;
		}
	}
}

bool verifelus(int vec[],int n,int elem){
	bool k=false;
	int i;
	for(i=0;i<n;i++){
		if(vec[i]==elem){
			k=true;
		}
	}
	return(k);
}

void generarfibo(int vec[],int n){
	int i,a=-1,b=1,c=0;
	for(i=0;i<n;i++){
		c=a+b;
		a=b;
		b=c;
		vec[i]=c;
	}
}

void generarprim(int vec[],int n){
	int i=0,p=1;
	while(i<n){
		if(verifprim(p)==true){
			vec[i]=p;
			i++;
		}
		p++;
	}
}

void main(){
	int vec[100],n,opcion,v2[25],n2,elem;
	do
	{
		cout<<endl<<"\n\n\t\t*****M E N U *****";
		cout<<endl<<"===============================================";
		cout<<endl<<"\n\t1.- cargar";
		cout<<endl<<"\n\t2.- mostrar";
		cout<<endl<<"\n\t3.- ordenar de manera adcendente";
		/*cout<<endl<<"\n\t4.- ordenar los numeros primos	";*/
		cout<<endl<<"\n\t4.- contador de  digitos de los vectores";
		cout<<endl<<"\n\t5.- eliminacion de elemento mayor";
		cout<<endl<<"\n\t6.- eliminaciones de elementos primos";
		cout<<endl<<"\n\t7,- veirficacion de elemento del usuario";
		cout<<endl<<"\n\t8.- generar automaticamente los numeros fibo";
		cout<<endl<<"\n\t9.- generar automaticamente los numeros primos";
		cout<<endl<<"\n\t0.- salir";
		cout<<endl<<"===============================================";
		cout<<endl<<"seleciona una opcion :";
		cin>>opcion;
		switch(opcion)
		{
		case 1: cout<<"introducir la cantidad de elementos : ";
			    cin>>n;
			    cargar(vec,n);
			    break;
		case 2: mostrar(vec,n);
			    break;
		case 3: ordadc(vec,n);
			    break;
		/*case 4: ordprim(vec,n);
			    break;*/
		case 4: opdigvect(vec,n,v2,n2);
			    mostrar(v2,n2);
				break;
		case 5: elmay(vec,n);
			    break;
		case 6: elemprim(vec,n);
			    break;
		case 7: cout<<"\nintroducir un elemento: ";
			    cin>>elem;
				if(verifelus(vec,n,elem)==true)
					cout<<"\nel elemento si existe ---->>";
				else
					cout<<"\nel elemento no existe ---->>";
				break;
		case 8: cout<<"\ninstroducir n numeros que desee generar: ";
			    cin>>n;
				generarfibo(vec,n);
				break;
		case 9: cout<<"\ninstroducir n numeros que desee generar: ";
			    cin>>n;
				generarprim(vec,n);
				break;
		}
	}while(opcion!=0);
}
